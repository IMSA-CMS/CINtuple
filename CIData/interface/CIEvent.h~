#ifndef CIEVENT_H
#define CIEVENT_H

//======================================================================
//CI Event Header File 
//Matthew Hokinson and John Woods 
//Date: July 19th, 2018
//Built to Simplify the existing MakeZprimeMiniAodTreeMC.cc file 
//======================================================================

//======================================================================
//Files to include (Same as the MakeZprimeMiniAodTreeMC header file)
//Can be cut down later 
//======================================================================

//Include the other CI Classes 
#include "ZprimeDiLeptons/CIData/interface/CIElectron.h"
#include "ZprimeDiLeptons/CIData/interface/CIGenParticles.h"
#include "ZprimeDiLeptons/CIData/interface/CIPhoton.h"
#include "ZprimeDiLeptons/CIData/interface/CIPrimaryVertex.h"
#include "ZprimeDiLeptons/CIData/interface/CIGenJets.h"
#include "ZprimeDiLeptons/CIData/interface/CITau.h"
#include "ZprimeDiLeptons/CIData/interface/CIJet.h"
#include "ZprimeDiLeptons/CIData/interface/CIBtags.h"
#include "ZprimeDiLeptons/CIData/interface/CIHLTrigger.h"
#include "ZprimeDiLeptons/CIData/interface/CIHLTObj.h"
#include "ZprimeDiLeptons/CIData/interface/CIMuonVtx.h"
#include "ZprimeDiLeptons/CIData/interface/CIMuon.h"
#include "ZprimeDiLeptons/CIData/interface/CIMet.h"

#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "DataFormats/JetReco/interface/GenJetCollection.h"
//#include "DataFormats/?EgammaReco/?interface/?SuperClusterFwd.h"
//#include "CommonTools/?PileupAlgos/?plugins/?PuppiProducer.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "TrackingTools/TransientTrack/interface/TransientTrackBuilder.h"
#include "DataFormats/PatCandidates/interface/Electron.h"
#include "RecoEcal/EgammaCoreTools/interface/EcalClusterLazyTools.h"
#include "DataFormats/PatCandidates/interface/Tau.h"
#include "DataFormats/PatCandidates/interface/Photon.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/MET.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/PatCandidates/interface/PackedGenParticle.h"
//#include "DataFormats/?EcalRecHit/?interface/?EcalRecHitCollections.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "DataFormats/PatCandidates/interface/TriggerObjectStandAlone.h"
#include "DataFormats/PatCandidates/interface/PackedTriggerPrescales.h"
#include "DataFormats/PatCandidates/interface/PackedCandidate.h"
#include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "TTree.h"
#include <iostream>
#include <string>
#include <vector>

class CIEvent
{
  public:
  	void PatElectronTree(double rhoIso, const reco::Vertex& PV, pat::ElectronCollection electron,
                        EcalRecHitCollection ecalEB, EcalRecHitCollection ecalEE, EcalClusterLazyTools lazyTools_,
                        edm::View<pat::Electron> eleHandle);
    void TriggerMatchingTree(edm::TriggerResults triggerBits, pat::TriggerObjectStandAloneCollection triggerObjects,
                            pat::TriggerObjectStandAloneCollection trigobj_handle,
                            pat::PackedTriggerPrescales triggerPrescales, const edm::TriggerNames& names);
    bool isAncestor(const reco::Candidate * ancestor, const reco::Candidate * particle);
    void accessGenInfo(bool h_passMInvCut, bool h_passPreFSRMInvCut, bool h_passST1MInvCut, bool h_passST23MInvCut,
                      bool h_passHSMInvCut, double h_xsWeight, edm::View<reco::GenParticle> pruned,
		       edm::View<pat::PackedGenParticle> packed, int BosonID_,  int ParticleID1_, int ParticleID2_, int ParticleID3_, int ParticleStatus_);
    
    void PatMuonTree(const reco::Vertex& PV, pat::MuonCollection muons);//THIS REUSES PV from Pat Electron Tree (USE SAME PV)		
    
    void ComputeMuonMassVtx(TransientTrackBuilder ttkb1, TransientTrackBuilder ttkb2, TransientTrackBuilder ttkb3,
			    const reco::Vertex& vertex, pat::MuonCollection muons);
    
    void PrimaryVertexTree(const reco::VertexCollection& vertices);
    bool PrimaryVertex(const reco::VertexCollection &vertices, double maxAbsZ_, double maxd0_, int minNdof_, int NbGoodPv_);
    void fillMET(const pat::MET& met);
    void GenJetTree(std::vector<reco::GenJet> const &genjets);
    void JetsTree(pat::JetCollection jetsC);
    void EventsReWeighting(float EventWeight);
    void ParticleFlowPhotonTree(pat::PackedCandidateCollection pfs, pat::PhotonCollection photons);
    void fillPU(std::vector<PileupSummaryInfo> PupInfo);
  
    void BtaggingTree(std::vector<pat::Jet> jets, const std::vector<std::string> bDiscriminators_);
    void TauTree(pat::TauCollection tausC);
    void FillEventInfo(unsigned int JRun, unsigned int JEvent, unsigned int Jlumi, unsigned int Jbunch);

    //=============================================================
    //These are for Simplifying the Long IF statements  
    //=============================================================
    bool findTriggerMatch(const edm::TriggerNames names, int index);
    bool findPathMatch(const std::vector<std::string> pathnames, int index);
    std::vector<std::string> makeTriggerPathCombos();


  private:

    //This is called twice for both pt cuts by ComputeMuonMassVtx
    void computeMuonMassVertices(TransientTrackBuilder ttkb1, TransientTrackBuilder ttkb2, TransientTrackBuilder ttkb3,
				 const reco::Vertex& vertex, pat::MuonCollection muons, double ptCut, std::vector<CIMuonVtx> & vertices);

    //=============================================================
    //
    //           Create Branchs for Nb of event,run,lumi
    //
    //=============================================================
    unsigned int Run;
    unsigned int Event;
    unsigned int lumi;
    unsigned int bunch;
    //==================================================
    //
    //      Create vectors for Electrons variables
    //
    //==================================================
    std::vector<CIElectron> elec;

    //=============================================================
    //
    //           Create Branchs for Muons match HLT variables
    //
    //=============================================================
    std::vector<CIHLTrigger> hltValues;

    std::vector<CIHLTObj> hltObjValues;
     //=============================================================
    //
    //           Create Branchs for Pimary Vertice variables
    //
    //=============================================================
    std::vector<CIPrimaryVertex> pVertex;
    //====================================================
    //
    // Create vectors for Jets variables
    //
    //====================================================
    std::vector<CIJet> jets;
    //====================================================
    //
    // Create vectors for BTagging variables
    //
    //====================================================
    std::vector<CIBtags> jetBtags;
    //====================================================
    //
    // Create vectors for Taus variables
    //
    //====================================================
    std::vector<CITau> taus;
    //=============================================================
    //
    //           Create Branchs for PileUp tree
    //
    //=============================================================
    int num_PU_vertices;
    int PU_BunchCrossing;
    int num_PU_gen_vertices;
    //=============================================================
    //
    //           Create Branch for Rho
    //
    //=============================================================
    float Rho;
    //=============================================================
    //
    //           Create Branch for events reweighting
    //
    //=============================================================
    std::vector<float> MC_weighting;
    //===================================================
    //
    //    Create vectors for gen particles variables
    //
    //===================================================
    std::vector<CIGenParticles> genParticles;
    /*//The ones below this are not used 
      MAYBE DELETE LATER 
    std::vector<float> vxGen;
    std::vector<float> vyGen;
    std::vector<float> vzGen;
    std::vector<int> NbOfDaughters;
    std::vector<float> McZmass;
    std::vector<float> McZpt;
    std::vector<float> McZpx;
    std::vector<float> McZpy;
    std::vector<float> McZpz;
    std::vector<float> McZen;*/
    //=============================================================
    //
    //           Create tree variables for extra GEN level info
    //
    //=============================================================
    double xsWeight;
    bool   passPreFSRMInvCut;
    bool   passMInvCut;
    bool   passST1MInvCut;
    bool   passST23MInvCut;
    bool   passHSMInvCut;
    //==================================================
    //
    //           Create vectors for Muons variables
    //
    //==================================================
    std::vector<CIMuon> muData;

    std::vector<CIMuonVtx> muonVertices;
    std::vector<CIMuonVtx> muonVertices30;
    //=============================================================
    //
    //           Create Branches for PF MET
    //
    //=============================================================
    CIMet metData;
    //===================================================
    //
    //    Create vectors for gen Jets variables
    //
    //===================================================
    std::vector<CIGenJets> genJet;
    //===================================================
    //
    //    Create vectors for photons variables
    //
    //===================================================
    std::vector<CIPhoton> photon;

    
    ClassDefNV(CIEvent,1)
};

#endif


